# silver 1
# 72ms

# 4구간으로 계속 구분되기 때문에, 구분해준다.
# 왼쪽 위, 오른쪽 위, 왼쪽 아래, 오른쪽 아래로 구분하여 계산하되,
# 왼쪽 위는 건너뛰는 구간이 없고,
# 오른쪽 위는 1구간(왼쪽 위), 왼쪽 아래는 2구간(왼쪽 위, 오른쪽 위), 오른쪽 아래는 3구간을 건너뜀에 유의한다.

def find(num, i, j, n):
    if i == r and j == c:
        print(num)
    elif r < i + (n // 2) and c < j + (n // 2):     # 분기점 기준 2사분면(왼쪽 위)
        find(num, i, j, n//2)                       # 2사분면은 건너뛰는 구간이 없다.
    elif r < i + (n // 2) and c >= j + (n // 2):    # 분기점 기준 1사분면(오른쪽 위)
        num += (n // 2) ** 2                        # 1사분면은 건너뛰는 2사분면을 건너뛰므로 그만큼 더해준다.
        find(num, i, j + n // 2, n // 2)
    elif r >= i + (n // 2) and c < j + (n // 2):    # 분기점 기준 3사분면(왼쪽 아래)
        num += (n // 2) ** 2 * 2                    # 3사분면은 1, 2 사분면을 건너뛰므로 그만큼
        find(num, i + n // 2, j, n // 2)
    elif r >= i + (n // 2) and c >= j + (n // 2):   # 분기점 기준 4사분면(오른쪽 아래)
        num += (n // 2) ** 2 * 3                    # 4사분면은 1, 2, 3사분면을 건너뛰므로 그만큼 더해준다.
        find(num, i + n // 2, j + n // 2, n // 2)


N, r, c = map(int, input().split())
find(0, 0, 0, 2**N)
